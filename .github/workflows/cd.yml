name: CD - Terraform Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action (apply/destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      image_tag:
        description: 'Git SHA image tag (optional)'
        required: false

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: rohana-strapi-repo
  ECS_CLUSTER_NAME: rohana-strapi-cluster
  ECS_SERVICE_NAME: rohana-strapi-service
  CODEDEPLOY_APP_NAME: rohana-strapi
  CODEDEPLOY_GROUP_NAME: rohana-strapi-dg

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Image URI
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:$IMAGE_TAG"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Generate image.auto.tfvars
        if: ${{ github.event.inputs.action == 'apply' }}
        env:
          EXECUTION_ROLE_ARN: ${{ secrets.EXECUTION_ROLE_ARN }}
          TASK_ROLE_ARN: ${{ secrets.TASK_ROLE_ARN }}
          APP_KEYS: ${{ secrets.APP_KEYS }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
          CODEDEPLOY_ROLE_ARN: ${{ secrets.CODEDEPLOY_ROLE_ARN }}
        run: |
          echo "container_image = \"$IMAGE_URI\"" > image.auto.tfvars
          echo "execution_role_arn = \"${EXECUTION_ROLE_ARN//[$'\t\r\n']}\"" >> image.auto.tfvars
          echo "task_role_arn = \"${TASK_ROLE_ARN//[$'\t\r\n']}\"" >> image.auto.tfvars
          echo "codedeploy_role_arn = \"${CODEDEPLOY_ROLE_ARN//[$'\t\r\n']}\"" >> image.auto.tfvars
          echo "app_keys = \"${APP_KEYS//[$'\t\r\n']}\"" >> image.auto.tfvars
          echo "jwt_secret = \"${JWT_SECRET//[$'\t\r\n']}\"" >> image.auto.tfvars
          echo "admin_jwt_secret = \"${ADMIN_JWT_SECRET//[$'\t\r\n']}\"" >> image.auto.tfvars
          echo "api_token_salt = \"${API_TOKEN_SALT//[$'\t\r\n']}\"" >> image.auto.tfvars

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform plan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve

      - name: Get Latest Task Definition ARN
        if: ${{ github.event.inputs.action == 'apply' }}
        id: taskdef
        run: |
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER_NAME" \
            --services "$ECS_SERVICE_NAME" \
            --query "services[0].taskDefinition" \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Trigger CodeDeploy Deployment
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          CONTENT=$(jq -n \
            --arg taskDef "$TASK_DEF_ARN" \
            '{
              version: 1,
              Resources: [
                {
                  TargetService: {
                    Type: "AWS::ECS::Service",
                    Properties: {
                      TaskDefinition: $taskDef,
                      LoadBalancerInfo: {
                        ContainerName: "rohana-strapi",
                        ContainerPort: 1337
                      }
                    }
                  }
                }
              ]
            }')

          aws deploy create-deployment \
            --application-name "$CODEDEPLOY_APP_NAME" \
            --deployment-group-name "$CODEDEPLOY_GROUP_NAME" \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --revision "revisionType=AppSpecContent,appSpecContent={content=$CONTENT}" \
            --description "Deployment via GitHub Actions"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve
        env:
          TF_VAR_admin_jwt_secret: ${{ secrets.ADMIN_JWT_SECRET }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_app_keys: ${{ secrets.APP_KEYS }}
          TF_VAR_api_token_salt: ${{ secrets.API_TOKEN_SALT }}
          TF_VAR_container_image: "dummy"
          TF_VAR_execution_role_arn: ${{ secrets.EXECUTION_ROLE_ARN }}
          TF_VAR_task_role_arn: ${{ secrets.TASK_ROLE_ARN }}

